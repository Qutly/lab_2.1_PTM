#include <avr/io.h>
#include <stdlib.h>
#include <string.h>
#include <util/delay.h>
 
#ifndef _BV
#define _BV(bit)        (1<<(bit))
#endif
#ifndef sbi
#define sbi(reg,bit)    reg |= (_BV(bit))
#endif
 
#ifndef cbi
#define cbi(reg,bit)    reg &= ~(_BV(bit))
#endif

#define LED_PIN_8 PB0
#define BUTTON_1 PB5
#define BUTTON_2 PB4
#define BUTTON_START PB3
#define BUTTON_STOP PB2

int main() {
  
  DDRD = 0xff;
  DDRB |= (1 << LED_PIN_8);

  DDRB &= ~(1<<BUTTON_1)&~(1<<BUTTON_2)&~(1<<BUTTON_START)&~(1<<BUTTON_STOP);
	PORTB |= (1<<BUTTON_1)|(1<<BUTTON_2)|(1<<BUTTON_START)|(1<<BUTTON_STOP);
  
  byte lastButtonState = LOW;
  byte ledState = LOW;

  int function_running = 0;

  byte tab[6] = {PD3, PD4, PD5, PD6, PD7, PB0};
  int i=0;
  bool go_right = true;

  while (1) {
    // ------ zadanie 2.1
    if(!(PINB & (1<<BUTTON_1))) sbi(PORTD, PD1);
    else cbi(PORTD, PD1);
    // ------ zadanie 2.2  
    byte buttonTwoState = (PINB & (1 << BUTTON_2)) ? HIGH : LOW;
    if (buttonTwoState != lastButtonState) {
      lastButtonState = buttonTwoState;
      if (buttonTwoState == HIGH) {
        ledState = (ledState == HIGH) ? LOW : HIGH;
        if (ledState == HIGH) {
          sbi(PORTD, PD2);
        } else {
          cbi(PORTD, PD2);
        }
      }
      _delay_ms(200);
    }
    // ------ zadanie 2.3 i 2.4
    if(!(PINB & (1<<BUTTON_START)) && function_running == 0) {
      function_running = 1;
      while(1) {
        i==5 ? sbi(PORTB, tab[i]) : sbi(PORTD, tab[i]);
        _delay_ms(500);
        i==5 ? cbi(PORTB, tab[i]) : cbi(PORTD, tab[i]);

        if(i==5)
          go_right = false;
        else if(i==0)
          go_right = true;

        if(go_right)
          i++;
        else
          i--;
        if(!(PINB & (1<<BUTTON_STOP)) && function_running == 1) {
          i=0;
          go_right=true;
          function_running=0;
          break;
        }
      }
    }
  }
}
